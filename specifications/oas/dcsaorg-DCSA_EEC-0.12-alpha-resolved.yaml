---
openapi: 3.0.0
info:
  title: |
    DCSA OpenAPI specification for Electronic Endorsement Chain - Alpha 1
  description: |
    API specification issued by DCSA.org.

    For a changelog please click [here](https://github.com/dcsaorg/DCSA-OpenAPI/tree/master/eec/v1#v100). Please also [create a GitHub issue](https://github.com/dcsaorg/DCSA-OpenAPI/issues/new) if you have any questions/comments.
  contact:
    name: Digital Container Shipping Association (DCSA)
    url: https://dcsa.org
    email: info@dcsa.org
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.12-alpha
servers:
- url: /
paths:
  /v1/transferblocks:
    put:
      tags:
      - Transferblock
      summary: PUT transferblock - transfers the EBL envelope via a transferblock to another platform
      description: |
        Retrieves the transport document
      parameters:
      - name: API-Version
        in: header
        description: |
          An API-Version header MAY be added to the request (optional); if added it MUST only contain MAJOR version. API-Version header MUST be aligned with the URI version.
        required: false
        schema:
          type: string
          example: "1"
      requestBody:
        description: the transferblock containing the B/L document along with the endorsement chain. The B/L document should be formatted according to [RFC8785](https://datatracker.ietf.org/doc/html/rfc8785)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/transferblock'
        required: true
      responses:
        "200":
          description: Request successful
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/transferblockResponse'
  /v1/.well-known/jwks.json:
    get:
      tags:
      - JWKS
      summary: JWKS endpoint providing the public key(s) of this platform
      description: provides the JWKS of the platform
      parameters:
      - name: API-Version
        in: header
        description: |
          An API-Version header MAY be added to the request (optional); if added it MUST only contain MAJOR version. API-Version header MUST be aligned with the URI version.
        required: false
        schema:
          type: string
          example: "1"
      responses:
        "200":
          description: Request successful
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jwks'
              example:
              - kty: RSA
                x5t#S256: exa8R4v9nLwglTQn1FKvLdUDYdPGs2Ftp-RezKSTM2A
                e: AQAB
                kid: dcsa-kid
                x5c:
                - MIIDfDCCAmSgAwIBAgIJAM6iTZvk8egFMA0GCSqGSIb3DQEBCwUAMGwxCzAJBgNVBAYTAk5MMRYwFAYDVQQIEw1Ob29yZC1Ib2xsYW5kMRIwEAYDVQQHEwlBbXN0ZXJkYW0xDTALBgNVBAoTBERDU0ExCzAJBgNVBAsTAklUMRUwEwYDVQQDEwxlYmwtZW52ZWxvcGUwHhcNMjIwNzI5MTAwNjQzWhcNMjIxMDI3MTAwNjQzWjBsMQswCQYDVQQGEwJOTDEWMBQGA1UECBMNTm9vcmQtSG9sbGFuZDESMBAGA1UEBxMJQW1zdGVyZGFtMQ0wCwYDVQQKEwREQ1NBMQswCQYDVQQLEwJJVDEVMBMGA1UEAxMMZWJsLWVudmVsb3BlMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA4wwZAmx07g7+rSvacPE60UvZyF02i1fTB/eg2Eu6zIuSr+np+IsEDPa5PdT4XYDSSbwa1gs1HUs7r8JY3OjUQdiXl0IgYj/YWsFJeokfne9kkSfDmFdTeiYzA+mcj68MF3wwK8UR72vprp8nWJeDxGXLjMCECr9vDGozaZ6+U15yVnAUVymBtbDlaNb2qT/OS0Nmls6pUdHfy7VM6QnYy58nBAH/PS4kdxThd1kauAN1+mUaVMYJNCbTlBSew/Y2cvC3Oh6iwe1lYkBIHMvkytGT3lbssX2mIwbht2O5EKg6b6YG2iii732w7i264i2OEKK2/+lR837Y2Es5zFR3vQIDAQABoyEwHzAdBgNVHQ4EFgQUOBRI3iOZCILGWS6ku4cdwLnyxc8wDQYJKoZIhvcNAQELBQADggEBAGIP6bQwA6FxUIJavCvmC/dLbrpkZn2b77QS9xNmDlIdtxgWHsIOK2KwOri2XqEvKhxWQ+xyEXk0F7tLmgA3soV8xDpQL32qc4/RWl3QS2dsXoRPPgMFAxY1Hu4ZAdiN8rdnWylvm7FNvTbE57PpQQXlaEF1dHR6fzBylET35W29pAuNZwdwcOyj0XzXqLHqpd87zluTq5k5JKIjjRAU2YMivLTt0986Q/ihEThVdcX00T3HiLUjRy3hE9HdbJgcdmSo094+T/sJ+rZ79SyNCnXeUYaUzFP6ZibBdf3jZhmolfqnAyJy3qHcQA61Rvn3C76bskxCG8ccspEM3VSJBzM=
                n: 4wwZAmx07g7-rSvacPE60UvZyF02i1fTB_eg2Eu6zIuSr-np-IsEDPa5PdT4XYDSSbwa1gs1HUs7r8JY3OjUQdiXl0IgYj_YWsFJeokfne9kkSfDmFdTeiYzA-mcj68MF3wwK8UR72vprp8nWJeDxGXLjMCECr9vDGozaZ6-U15yVnAUVymBtbDlaNb2qT_OS0Nmls6pUdHfy7VM6QnYy58nBAH_PS4kdxThd1kauAN1-mUaVMYJNCbTlBSew_Y2cvC3Oh6iwe1lYkBIHMvkytGT3lbssX2mIwbht2O5EKg6b6YG2iii732w7i264i2OEKK2_-lR837Y2Es5zFR3vQ
  /v1/user/{userId}:
    get:
      tags:
      - User
      summary: Retrieves user information based on the user Id
      description: |
        In order to facilitate additional verification checks before sending the BL to another party on potentially a different platform and additional endpoint is created that platforms can provide (and call on another platform). This endpoint will return a information on the user requested based on their local identifier. The receiving platform can use this information in a variety of cases
      parameters:
      - name: userId
        in: path
        description: userId of the user on the platform
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: API-Version
        in: header
        description: |
          An API-Version header MAY be added to the request (optional); if added it MUST only contain MAJOR version. API-Version header MUST be aligned with the URI version.
        required: false
        schema:
          type: string
          example: "1"
      responses:
        "200":
          description: Request successful
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/partyVerification'
              examples:
                minimal:
                  value:
                    id: c3ab8ff13720e8ad9047dd39466b3c8974e592c2fa383d4a3960714caef0c4f2
                    name: Digital Container Shipping Association
                    registrationNumber: 74567837
                    countryOfRegistration: NL
                full:
                  value:
                    id: c3ab8ff13720e8ad9047dd39466b3c8974e592c2fa383d4a3960714caef0c4f2
                    name: Digital Container Shipping Association
                    registrationNumber: 74567837
                    countryOfRegistration: NL
                    address: Strawinskylaan 4117, Amsterdam
                    taxReference: NL859951480B01
                    lei: 254900G14ALGVKORFN62
                    did: did:example:123456789abcdefghi
components:
  schemas:
    sha256Hash:
      maxLength: 64
      minLength: 64
      type: string
      description: 'sha256 hash according to: https://datatracker.ietf.org/doc/html/rfc6234'
    transferblock:
      type: object
      properties:
        document:
          discriminator:
            propertyName: ebldocumentType
          oneOf:
          - allOf:
            - type: object
              properties:
                ebldocumentType:
                  type: string
                  example: DCSA-TD-v2
            - $ref: '#/components/schemas/transportDocument'
          - allOf:
            - type: object
              properties:
                ebldocumentType:
                  type: string
                  example: FIATA-v1
            - $ref: '#/components/schemas/fiataBL'
          - allOf:
            - type: object
              properties:
                ebldocumentType:
                  type: string
                  example: BIMCO-v1
            - $ref: '#/components/schemas/bimcoBL'
        supportingDocuments:
          type: array
          items:
            $ref: '#/components/schemas/transferblock_supportingDocuments'
        endorsementChain:
          type: array
          items:
            $ref: '#/components/schemas/endorsementChainEntry'
    endorsementChainEntry:
      required:
      - eblEnvelope
      - envelopeHash
      - signature
      type: object
      properties:
        envelopeHash:
          maxLength: 64
          minLength: 64
          type: string
          description: 'sha256 hash of the eblEnvelope object formatted as sha256 hash according to: https://datatracker.ietf.org/doc/html/rfc6234'
          example: 20a0257b313ae08417e07f6555c4ec829a512c083f3ead16b41158018a22abe9
        signature:
          pattern: ^([a-zA-Z0-9_=]+)\.([a-zA-Z0-9_=]+)\.([a-zA-Z0-9_\-\+\/=]*)
          type: string
          description: 'JWS with compact serialization according to: [RFC 7515](https://datatracker.ietf.org/doc/html/rfc7515#section-7.1). The content of the payload is the EBL-Envelope defined in: [eblEnvelope](#/eblEnvelope)'
          example: eyJhbGciOiJSUzI1NiJ9.eyJwcmV2aW91c0VudmVsb3BlSGFzaCI6bnVsbCwiZG9jdW1lbnRIYXNoIjoiMDNlODJjMWRjOGJmYWM4NDZjOTcxMmM0ZGY4NzZlYjRkYmU1NzVkMWE2OWQwMGI4NjM4Nzc4YjJhZDMzZTNiNCIsInRyYW5zYWN0aW9ucyI6W3siYWN0aW9uIjoiSVNTVSIsImNvbW1lbnRzIjoiVGhlIEIvTCBoYXMgYmVlbiBpc3N1ZWQuIiwidGltZXN0YW1wIjoxNjcyODI4ODQ4ODEwLCJpc1RvT3JkZXIiOnRydWUsInBsYXRmb3JtSG9zdCI6IjE4ZDg5ZmE3YzNjNjo4NDQzIiwidHJhbnNmZXJlZSI6ImZvb0A4OTg2MTc4OS1mMTczLTQ1MmItOTEyMy1hNmMzNWRlZDQ3NjAubW9jay5wc3Rtbi5pbyJ9LHsiYWN0aW9uIjoiVFJOUyIsImNvbW1lbnRzIjoiVGhlIEIvTCBleHBvcnRlZCB0bzogZm9vQDg5ODYxNzg5LWYxNzMtNDUyYi05MTIzLWE2YzM1ZGVkNDc2MC5tb2NrLnBzdG1uLmlvIiwidGltZXN0YW1wIjoxNjcyODI4ODQ4ODk5LCJpc1RvT3JkZXIiOnRydWUsInBsYXRmb3JtSG9zdCI6IjE4ZDg5ZmE3YzNjNjo4NDQzIiwidHJhbnNmZXJlZSI6ImZvb0A4OTg2MTc4OS1mMTczLTQ1MmItOTEyMy1hNmMzNWRlZDQ3NjAubW9jay5wc3Rtbi5pbyJ9XX0.vKMYcSkHXkyFJBMVuyfHu-tmw2I5HIU-onp9h64r7fseW7BmM-fHpFCLCoY-q_eihJLxA946vYE7C3jXFUHwKxHqj9DRbj3aox3FKAu88-L4-hvY3aBQaFPlpUpW30ICBXDJuyckxWpcZqYSW8AcAJvvYG64XPDAkWVj2HeoNh4ZOv-WBDkrcKoKYO7boRRjX2rYJwclDIcgnshrHECYdBRZNCUZb2sLUO2qhNpIz-5oILoiT31jj5bVgn4zZMs4zHd5iL1FMD9QlHA5kQHEiejhFaOGzZqgvveAGJ2NhZcuBJok9yatf49QMS6Ada4w37UFQB_Ug5hp404PBDFqQQ
    eblEnvelope:
      required:
      - documentHash
      - previousEnvelopeHash
      - transactions
      type: object
      properties:
        documentHash:
          maxLength: 64
          minLength: 64
          type: string
          description: 'DocumentHash is the hash of he eBL according to the [DCSA eBL specification](https://app.swaggerhub.com/apis/dcsaorg/DCSA_EBL/2.0.0-Beta-2#/Transport%20Documents/get_v2_transport_documents__transportDocumentReference_) which is also attached in the transferblock in document. formatted as sha256 hash according to: https://datatracker.ietf.org/doc/html/rfc6234'
          example: 76a7d14c83d7268d643ae7345c448de60701f955d264a743e6928a0b8268b24f
        previousEnvelopeHash:
          maxLength: 64
          minLength: 64
          type: string
          description: 'previousEnvelopeHash links to a previous envelope Hash. Tracking transactions between platforms. formatted as sha256 hash according to: https://datatracker.ietf.org/doc/html/rfc6234'
          nullable: true
        transactions:
          type: array
          items:
            $ref: '#/components/schemas/transaction'
    transaction:
      required:
      - instruction
      - isToOrder
      - platformHost
      - timestamp
      - transferee
      type: object
      properties:
        action:
          type: string
          description: |
            instruction for processing the transaction
            - ISSU (Issue)
            - TRNS (Transfer)
            - SURR (Surrender)
            - SREQ (Request to surrender)
            - AMND (Ammend)
            - AREQ (Request to Amend)
            - SW2P (Switch to Paper)
            - PREQ (Request to switch to paper)
            - ADOC (Add supported document)
            - RDOC (Remove supported document)
          enum:
          - ISSU
          - TRNS
          - SURR
          - SREQ
          - AMND
          - AREQ
          - SW2P
          - PREQ
          - ADOC
          - RDOC
        comments:
          maxLength: 255
          type: string
          description: free text comment for the party receiving the transaction.
          example: The B/L has been issued.
        timestamp:
          type: number
          description: Unix epoch with millisecond precision of when the transaction was created
          example: 1658385166302442200
        isToOrder:
          type: boolean
          description: indicator if the B/L is to order
          example: true
        platformHost:
          pattern: ^https?:\/\/(www\.)?(.*)?\/?(.)*
          type: string
          description: base url of the platform which created the transaction
          example: https://exampleblplatform.net
        supportingDocuments:
          type: array
          items:
            $ref: '#/components/schemas/transaction_supportingDocuments'
        transferee:
          required:
          - eBLPlatformIdentifier
          allOf:
          - type: object
            properties:
              eBLPlatformIdentifier:
                type: string
                example: 43549850248@exampleplatform.com
          - $ref: '#/components/schemas/party'
    party:
      required:
      - partyName
      type: object
      description: refers to a company or a legal entity.
      allOf:
      - type: object
        properties:
          partyName:
            $ref: '#/components/schemas/partyName'
      - type: object
        properties:
          taxReference1:
            $ref: '#/components/schemas/taxReference1'
      - type: object
        properties:
          taxReference2:
            $ref: '#/components/schemas/taxReference2'
      - type: object
        properties:
          publicKey:
            $ref: '#/components/schemas/publicKey'
      - type: object
        properties:
          address:
            oneOf:
            - $ref: '#/components/schemas/displayAddress'
            - $ref: '#/components/schemas/address'
      - type: object
        properties:
          partyContactDetails:
            minItems: 1
            type: array
            description: |
              A list of contact details - the list cannot be empty
            items:
              allOf:
              - $ref: '#/components/schemas/partyContactDetail'
      - type: object
        properties:
          identifyingCodes:
            type: array
            items:
              allOf:
              - $ref: '#/components/schemas/identifyingCode'
    identifyingCode:
      required:
      - DCSAResponsibleAgencyCode
      - partyCode
      type: object
      allOf:
      - type: object
        properties:
          DCSAResponsibleAgencyCode:
            $ref: '#/components/schemas/DCSAResponsibleAgencyCode'
      - type: object
        properties:
          partyCode:
            $ref: '#/components/schemas/partyCode'
      - type: object
        properties:
          codeListName:
            $ref: '#/components/schemas/codeListName'
    displayAddress:
      type: object
      properties:
        displayAddress:
          type: string
          example: Kronprincessegade 54, 5. sal, 1306 København Denmark
    partyContactDetail:
      required:
      - name
      type: object
      description: |
        Contact information for a Party
      allOf:
      - type: object
        properties:
          name:
            $ref: '#/components/schemas/name'
      - type: object
        properties:
          phone:
            $ref: '#/components/schemas/phone'
      - type: object
        properties:
          email:
            $ref: '#/components/schemas/email'
      - type: object
        properties:
          url:
            $ref: '#/components/schemas/url'
    DCSAResponsibleAgencyCode:
      type: string
      description: |
        A DCSA provided code for [UN/CEFACT](https://unece.org/fileadmin/DAM/trade/untdid/d16b/tred/tred3055.htm) code list providers:
        - ISO (International Standards Organization)
        - UNECE (United Nations Economic Commission for Europe)
        - LLOYD (Lloyd's register of shipping)
        - BIC (Bureau International des Containeurs)
        - IMO (International Maritime Organization)
        - SCAC (Standard Carrier Alpha Code)
        - ITIGG (International Transport Implementation Guidelines Group)
        - ITU (International Telecommunication Union)
        - SMDG (Shipplanning Message Development Group)
        - EXIS (Exis Technologies Ltd.)
        - FMC (Federal Maritime Commission)
        - CBSA (Canada Border Services Agency)
        - DCSA (Digital Container Shipping Association)
        - DID (Decentralized Identifier)
        - LEI (Legal Entity Identifier)
        - ZZZ (Mutually defined)

        More details can be found on [GitHub](https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/codelistresponsibleagencycodes.csv).
      example: SMDG
      enum:
      - ISO
      - UNECE
      - LLOYD
      - BIC
      - IMO
      - SCAC
      - ITIGG
      - ITU
      - SMDG
      - EXIS
      - FMC
      - CBSA
      - DCSA
      - DID
      - LEI
      - ZZZ
    partyCode:
      maxLength: 100
      type: string
      description: |
        Code to identify the party as provided by the agency
      example: MSK
    codeListName:
      maxLength: 100
      type: string
      description: |
        The name of the list, provided by the responsible agency
      example: LCL
    transferblockResponse:
      pattern: ^([a-zA-Z0-9_=]+)\.([a-zA-Z0-9_=]+)\.([a-zA-Z0-9_\-\+\/=]*)
      type: string
      description: 'JWS with compact serialization according to: https://datatracker.ietf.org/doc/html/rfc7515#section-7.1 payload of the JWS contains the envelopeHash as received signed by the receiving platform.'
      example: eyJraWQiOiJmNjA1YmZlYi1jZjUwLTQ1MTItYTM5Zi02OGRlZGZmYjJhNDgiLCJhbGciOiJSUzI1NiJ9.ImVudmVsb3BlSGFzaCI6ICJkNTZhOTNhN2U5Zjg2YTJkODk1ZGY4MThlMDQ0MGJkY2E2ZmZlMDMyNDZlMmZlZTE0MTMxZjJlNjZjODRjNzVhIg.ff6MAR0Pwtnt3_RGzgIH0oemzusB3iiE1zsq5-q-bpRDLwKV4gS_yCYtz1TMRKF021c7CAWS-NmaTS8e1ydtTRZDEmxENVDl4z58rCIM3_oOpP6XItHkSCacBIi90kQzl97b-ZDC75a1cm1ez39pcg8izDlpUuhNvY6QqN7Dju0bw_-1kZ4YjedMyxgRHztVNNbHUe9qhpbB_yOo0sYb2KmkeOwnA6wKoRvUxWaQU-2RbuK4eAwhjWc5ZgJ3DOLZBLk3ucuz1KT6QCOwfce2oG2tIxuFBsoubStMPfvmAwuKVBMuCHl_NKKzoxRvAkExRLWNi9q6kuAyqfisHhZfBw
    partyVerification:
      required:
      - countryOfRegistration
      - name
      - registrationNumber
      - userId
      type: object
      properties:
        id:
          type: string
          description: local identifier of the party or user on the platform
          example: c3ab8ff13720e8ad9047dd39466b3c8974e592c2fa383d4a3960714caef0c4f2
        name:
          type: string
          description: Name of the party/user as shown on the endorsement chain
          example: Digital Container Shipping Association
        registrationNumber:
          type: string
          description: Company registration number of this party. E.g. registration number on the local chamber of commerse.
          example: "74567837"
        countryOfRegistration:
          maxLength: 2
          minLength: 2
          type: string
          description: country code of the country of registration according to ISO 3166-1 alpha-2
          example: NL
        address:
          type: string
          description: address used during registration
          example: Strawinskylaan 4117, Amsterdam
        taxReference:
          type: string
          description: tax reference used in the country of registration
          example: NL859951480B01
        lei:
          maxLength: 20
          minLength: 20
          type: string
          description: The Legal Entity Identifier (LEI) is a unique global identifier for legal entities participating in financial transactions
        did:
          type: string
          description: Decentralized identifiers (DIDs) are a type of globally unique identifier that enables an entity to be identified in a manner that is verifiable, persistent (as long as the DID controller desires), and does not require the use of a centralized registry.
    fiataBL:
      type: object
    bimcoBL:
      type: object
    jwks:
      required:
      - keys
      type: object
      properties:
        keys:
          type: array
          items:
            $ref: '#/components/schemas/jwks_keys'
      description: JSON Web Key Set to validate JSON Web Signatures, according to [RFC 7517](https://www.ietf.org/rfc/rfc7517.txt)
    ecPublicKey:
      type: object
      properties:
        crv:
          type: string
        x:
          type: string
          description: |
            The "x" (x coordinate) parameter contains the x coordinate for the
            Elliptic Curve point.  It is represented as the base64url encoding of
            the octet string representation of the coordinate, as defined in
            Section 2.3.5 of SEC1 [SEC1].  The length of this octet string MUST
            be the full size of a coordinate for the curve specified in the "crv"
            parameter.  For example, if the value of "crv" is "P-521", the octet
            string must be 66 octets long.
          format: byte
        y:
          maxLength: 66
          minLength: 66
          type: string
          description: |
            he "y" (y coordinate) parameter contains the y coordinate for the
            Elliptic Curve point.  It is represented as the base64url encoding of
            the octet string representation of the coordinate, as defined in
            Section 2.3.5 of SEC1 [SEC1].  The length of this octet string MUST
            be the full size of a coordinate for the curve specified in the "crv"
            parameter.  For example, if the value of "crv" is "P-521", the octet
            string must be 66 octets long.
          format: byte
    ecPrivateKey:
      type: object
      properties:
        d:
          type: string
          description: |
            The "d" (ECC private key) parameter contains the Elliptic Curve
            private key value.  It is represented as the base64url encoding of
            the octet string representation of the private key value, as defined
            in Section 2.3.7 of SEC1 [SEC1].  The length of this octet string
            MUST be ceiling(log-base-2(n)/8) octets (where n is the order of the
            curve).
          format: byte
    rsaPublicKey:
      type: object
      properties:
        n:
          type: string
          description: |
            The "n" (modulus) parameter contains the modulus value for the RSA
            public key.  It is represented as a Base64urlUInt-encoded value.

            Note that implementers have found that some cryptographic libraries
            prefix an extra zero-valued octet to the modulus representations they
            return, for instance, returning 257 octets for a 2048-bit key, rather
            than 256.  Implementations using such libraries will need to take
            care to omit the extra octet from the base64url-encoded
            representation.
          format: byte
        e:
          type: string
          description: |
            The "e" (exponent) parameter contains the exponent value for the RSA
            public key.  It is represented as a Base64urlUInt-encoded value.

            For instance, when representing the value 65537, the octet sequence
            to be base64url-encoded MUST consist of the three octets [1, 0, 1];
            the resulting representation for this value is "AQAB".
          format: byte
    rsaPrivateKey:
      type: object
      properties:
        d:
          type: string
          description: |
            The "d" (private exponent) parameter contains the private exponent
            value for the RSA private key.  It is represented as a Base64urlUInt-
            encoded value.
          format: byte
        p:
          type: string
          description: |
            The "p" (first prime factor) parameter contains the first prime
            factor.  It is represented as a Base64urlUInt-encoded value.
          format: byte
        q:
          type: string
          description: |
            The "q" (second prime factor) parameter contains the second prime
            factor.  It is represented as a Base64urlUInt-encoded value.
          format: byte
        dp:
          type: string
          description: |
            The "dp" (first factor CRT exponent) parameter contains the Chinese
            Remainder Theorem (CRT) exponent of the first factor.  It is
            represented as a Base64urlUInt-encoded value.
          format: byte
        dq:
          type: string
          description: |
            he "dq" (second factor CRT exponent) parameter contains the CRT
            exponent of the second factor.  It is represented as a Base64urlUInt-
            encoded value.
          format: byte
        qi:
          type: string
          description: |
            The "qi" (first CRT coefficient) parameter contains the CRT
            coefficient of the second factor.  It is represented as a
            Base64urlUInt-encoded value.
          format: byte
        oth:
          type: array
          description: |
            The "oth" (other primes info) parameter contains an array of
            information about any third and subsequent primes, should they exist.
            When only two primes have been used (the normal case), this parameter
            MUST be omitted.  When three or more primes have been used, the
            number of array elements MUST be the number of primes used minus two.
            For more information on this case, see the description of the
            OtherPrimeInfo parameters in Appendix A.1.2 of RFC 3447 [RFC3447],
            upon which the following parameters are modeled.  If the consumer of
            a JWK does not support private keys with more than two primes and it
            encounters a private key that includes the "oth" parameter, then it
            MUST NOT use the key.  Each array element MUST be an object with the
            following members.
          items:
            $ref: '#/components/schemas/rsaPrivateKey_oth'
    symKey:
      type: object
      properties:
        k:
          type: string
          description: |-
            The "k" (key value) parameter contains the value of the symmetric (or
            other single-valued) key.  It is represented as the base64url
            encoding of the octet sequence containing the key value.
          format: byte
    transportDocument:
      required:
      - shippingInstruction
      type: object
      description: "The document that governs the terms of carriage between shipper and carrier for maritime transportation. Two distinct types of transport documents exist:\n- Bill of Lading\n- Sea Waybill. \n"
      allOf:
      - $ref: '#/components/schemas/transportDocumentRoot'
      - type: object
        properties:
          termsAndConditions:
            allOf:
            - $ref: '#/components/schemas/termsAndConditions'
      - $ref: '#/components/schemas/bookingCore'
      - type: object
        properties:
          invoicePayableAt:
            anyOf:
            - $ref: '#/components/schemas/addressLocation'
            - $ref: '#/components/schemas/unLocationLocation'
      - type: object
        properties:
          invoicePayableAt:
            description: |
              General purpose object to capture `Invoice Payable At` location. The location can be specified in **any** of the following ways: `UN Location Code` and/or an `Address`.
            example:
              locationName: Eiffel Tower
              UNLocationCode: FRPAR
      - type: object
        properties:
          placeOfIssue:
            anyOf:
            - $ref: '#/components/schemas/addressLocation'
            - $ref: '#/components/schemas/unLocationLocation'
      - type: object
        properties:
          placeOfIssue:
            description: |
              General purpose object to capture where the original Transport Document (`Bill of Lading`) will be issued. The location can be specified in **any** of the following ways: `UN Location Code` and/or an `Address`.
            example:
              locationName: DCSA Headquarters
              UNLocationCode: NLAMS
      - type: object
        properties:
          shippingInstruction:
            allOf:
            - $ref: '#/components/schemas/shippingInstructionResponse'
      - $ref: '#/components/schemas/charges'
      - $ref: '#/components/schemas/carrierClauses'
    transportDocumentRoot:
      required:
      - carrierCode
      - carrierCodeListProvider
      - issuingParty
      - transportDocumentReference
      type: object
      allOf:
      - type: object
        properties:
          transportDocumentReference:
            $ref: '#/components/schemas/transportDocumentReference'
      - type: object
        properties:
          transportDocumentCreatedDateTime:
            $ref: '#/components/schemas/transportDocumentCreatedDateTime'
      - type: object
        properties:
          transportDocumentUpdatedDateTime:
            $ref: '#/components/schemas/transportDocumentUpdatedDateTime'
      - type: object
        properties:
          issueDate:
            $ref: '#/components/schemas/issueDate'
      - type: object
        properties:
          shippedOnBoardDate:
            $ref: '#/components/schemas/shippedOnBoardDate'
      - type: object
        properties:
          receivedForShipmentDate:
            $ref: '#/components/schemas/receivedForShipmentDate'
      - type: object
        properties:
          numberOfOriginals:
            $ref: '#/components/schemas/issuedNumberOfOriginals'
      - type: object
        properties:
          carrierCode:
            $ref: '#/components/schemas/carrierCode'
      - type: object
        properties:
          carrierCodeListProvider:
            $ref: '#/components/schemas/carrierCodeListProvider'
      - type: object
        properties:
          issuingParty:
            allOf:
            - $ref: '#/components/schemas/party_1'
      - type: object
        properties:
          numberOfRiderPages:
            $ref: '#/components/schemas/numberOfRiderPages'
    transportDocumentReference:
      maxLength: 20
      type: string
      description: |
        A unique number allocated by the shipping line to the transport document and the main number used for the tracking of the status of the shipment.
    transportDocumentCreatedDateTime:
      type: string
      description: |
        Date and time when the TransportDocument was created
      format: date-time
      example: 2019-11-12T07:41:00+08:30
    transportDocumentUpdatedDateTime:
      type: string
      description: |
        Date and time when the TransportDocument was updated
      format: date-time
      example: 2019-11-12T07:41:00+08:30
    issueDate:
      type: string
      description: Local date when the transport document has been issued
      format: date
      example: 2020-12-12
    shippedOnBoardDate:
      type: string
      description: Date when the last container that is linked to the transport document is physically loaded onboard the vessel indicated on the transport document.
      format: date
      example: 2020-12-12
    receivedForShipmentDate:
      type: string
      description: Date when the last container linked to the transport document is physically in the terminal (customers cleared against the intended vessel).
      format: date
      example: 2020-12-12
    issuedNumberOfOriginals:
      type: integer
      description: |
        Number of original copies of the negotiable bill of lading that has been issued to the customer.
      format: int32
      example: 4
    carrierCode:
      maxLength: 4
      type: string
      description: |
        The code containing the SCAC and/or the SMDG code to specify the issuing carrier.  Details about the issuer can be given in the Document Parties entity using the party function code MS.
      example: MMCU
    carrierCodeListProvider:
      type: string
      description: |
        The provider used for identifying the issuer Code
      example: NMFTA
      enum:
      - SMDG
      - NMFTA
    party_1:
      required:
      - partyContactDetails
      type: object
      description: refers to a company or a legal entity.
      allOf:
      - type: object
        properties:
          partyName:
            $ref: '#/components/schemas/partyName'
      - type: object
        properties:
          taxReference1:
            $ref: '#/components/schemas/taxReference1'
      - type: object
        properties:
          taxReference2:
            $ref: '#/components/schemas/taxReference2'
      - type: object
        properties:
          publicKey:
            $ref: '#/components/schemas/publicKey'
      - type: object
        properties:
          address:
            allOf:
            - $ref: '#/components/schemas/address'
      - type: object
        properties:
          partyContactDetails:
            minItems: 1
            type: array
            description: |
              A list of contact details - the list cannot be empty
            items:
              allOf:
              - $ref: '#/components/schemas/partyContactDetail'
      - type: object
        properties:
          identifyingCodes:
            type: array
            items:
              allOf:
              - $ref: '#/components/schemas/identifyingCode'
    partyName:
      maxLength: 100
      type: string
      description: Name of the party.
      example: Asseco Denmark
    taxReference1:
      maxLength: 20
      type: string
      description: The identifying number of the consignee or shipper (Individual or entity) used for tax purposes.
      example: CVR-25645774
    taxReference2:
      maxLength: 20
      type: string
      description: Optional second identifying number of the consignee or shipper (Individual or entity) used for tax purposes.
      example: CVR-25645774
    publicKey:
      maxLength: 500
      type: string
      description: The public key used for a digital signature.
      example: eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IkFzaW
    address:
      type: object
      description: |
        An object for storing address related information
      allOf:
      - type: object
        properties:
          name:
            $ref: '#/components/schemas/addressName'
      - type: object
        properties:
          street:
            $ref: '#/components/schemas/streetName'
      - type: object
        properties:
          streetNumber:
            $ref: '#/components/schemas/streetNumber'
      - type: object
        properties:
          floor:
            $ref: '#/components/schemas/floor'
      - type: object
        properties:
          postCode:
            $ref: '#/components/schemas/postCode'
      - type: object
        properties:
          city:
            $ref: '#/components/schemas/cityName'
      - type: object
        properties:
          stateRegion:
            $ref: '#/components/schemas/stateRegion'
      - type: object
        properties:
          country:
            $ref: '#/components/schemas/country'
    addressName:
      maxLength: 100
      type: string
      description: Name of the address
      example: Henrik
    streetName:
      maxLength: 100
      type: string
      description: The name of the street of the party’s address.
      example: Kronprincessegade
    streetNumber:
      maxLength: 50
      type: string
      description: The number of the street of the party’s address.
      example: "54"
    floor:
      maxLength: 50
      type: string
      description: The floor of the party’s street number.
      example: 5. sal
    postCode:
      maxLength: 50
      type: string
      description: The post code of the party’s address.
      example: "1306"
    cityName:
      maxLength: 65
      type: string
      description: The city name of the party’s address.
      example: København
    stateRegion:
      maxLength: 65
      type: string
      description: The state/region of the party’s address.
      example: N/A
    country:
      maxLength: 75
      type: string
      description: The country of the party’s address.
      example: Denmark
    numberOfRiderPages:
      type: integer
      description: The number of additional pages required to contain the goods description on a transport document. Only applicable for physical transport documents.
      format: int32
      example: 2
    termsAndConditions:
      type: string
      description: |
        Carrier general terms and conditions for the booking.
    bookingCore:
      type: object
      description: |
        Fields needed in both `Booking` and `TransportDocument`
      allOf:
      - $ref: '#/components/schemas/bookingShallowCore'
      - $ref: '#/components/schemas/transports'
      - $ref: '#/components/schemas/shipmentLocations'
    bookingShallowCore:
      type: object
      description: |
        Fields needed in both `Booking` and `TransportDocument`
      allOf:
      - type: object
        properties:
          receiptTypeAtOrigin:
            $ref: '#/components/schemas/receiptTypeAtOrigin'
      - type: object
        properties:
          deliveryTypeAtDestination:
            $ref: '#/components/schemas/deliveryTypeAtDestination'
      - type: object
        properties:
          cargoMovementTypeAtOrigin:
            $ref: '#/components/schemas/cargoMovementTypeAtOrigin'
      - type: object
        properties:
          cargoMovementTypeAtDestination:
            $ref: '#/components/schemas/cargoMovementTypeAtDestination'
      - type: object
        properties:
          serviceContractReference:
            $ref: '#/components/schemas/serviceContractReference'
      - type: object
        properties:
          vesselName:
            $ref: '#/components/schemas/vesselName'
      - type: object
        properties:
          carrierExportVoyageNumber:
            $ref: '#/components/schemas/carrierExportVoyageNumber'
      - type: object
        properties:
          universalExportVoyageReference:
            $ref: '#/components/schemas/universalExportVoyageReference'
      - type: object
        properties:
          declaredValue:
            $ref: '#/components/schemas/declaredValue'
      - type: object
        properties:
          declaredValueCurrency:
            $ref: '#/components/schemas/declaredValueCurrency'
    receiptTypeAtOrigin:
      maxLength: 3
      type: string
      description: |
        Indicates the type of service offered at Origin. Options are defined in the Receipt/Delivery entity.
        - CY (Container yard (incl. rail ramp))
        - SD (Store Door)
        - CFS (Container Freight Station)
      example: CY
      enum:
      - CY
      - SD
      - CFS
    deliveryTypeAtDestination:
      maxLength: 3
      type: string
      description: |
        Indicates the type of service offered at Destination. Options are defined in the Receipt/Delivery entity.
        - CY (Container yard (incl. rail ramp))
        - SD (Store Door)
        - CFS (Container Freight Station)
      example: CY
      enum:
      - CY
      - SD
      - CFS
    cargoMovementTypeAtOrigin:
      maxLength: 3
      type: string
      description: |
        Refers to the shipment term at the loading of the cargo into the container. Options are defined in the Cargo Movement Type entity.
        - FCL (Full Container Load)
        - LCL (Less than Container Load)
        - BB (Break Bulk)
      example: FCL
      enum:
      - FCL
      - LCL
      - BB
    cargoMovementTypeAtDestination:
      maxLength: 3
      type: string
      description: |
        Refers to the shipment term at the unloading of the cargo out of the container. Options are defined in the Cargo Movement Type entity.
        - FCL (Full Container Load)
        - LCL (Less than Container Load)
        - BB (Break Bulk)
      example: FCL
      enum:
      - FCL
      - LCL
      - BB
    serviceContractReference:
      maxLength: 30
      type: string
      description: Reference number for agreement between shipper and carrier through which the shipper commits to provide a certain minimum quantity of cargo over a fixed period, and the carrier commits to a certain rate or rate schedule.
    vesselName:
      maxLength: 35
      type: string
      description: |
        The name of the Vessel given by the Vessel Operator and registered with IMO.
      example: King of the Seas
    carrierExportVoyageNumber:
      maxLength: 50
      type: string
      description: |
        The identifier of an export voyage. The vessel operator-specific identifier of the export Voyage.
      example: 2103S
    universalExportVoyageReference:
      pattern: \d{2}[0-9A-Z]{2}[NEWS]
      type: string
      description: |
        A global unique voyage reference for the export Voyage, as per DCSA standard, agreed by VSA partners for the voyage. The voyage reference must match the regular expression pattern: `\d{2}[0-9A-Z]{2}[NEWS]`
        - `2 digits` for the year
        - `2 alphanumeric characters` for the sequence number of the voyage
        - `1 character` for the direction/haul (`N`orth, `E`ast, `W`est or `S`outh).
      example: 2103N
    declaredValue:
      type: number
      description: The value of the cargo that the shipper declares to avoid the carrier&apos;s limitation of liability and "Ad Valorem" freight, i.e. freight which is calculated based on the value of the goods declared by the shipper.
      format: float
      example: 1231.1
    declaredValueCurrency:
      maxLength: 3
      type: string
      description: The currency used for the declared value, using the 3-character code defined by ISO 4217.
      example: DKK
    transports:
      type: object
      properties:
        transports:
          type: array
          items:
            $ref: '#/components/schemas/transport'
    transport:
      required:
      - dischargeLocation
      - loadLocation
      - plannedArrivalDate
      - plannedDepartureDate
      - transportPlanStage
      - transportPlanStageSequenceNumber
      type: object
      description: A list of transports sorted by ShipmentTransport sequenceNumber
      allOf:
      - type: object
        properties:
          transportPlanStage:
            $ref: '#/components/schemas/transportPlanStage'
      - type: object
        properties:
          transportPlanStageSequenceNumber:
            $ref: '#/components/schemas/transportPlanStageSequenceNumber'
      - type: object
        properties:
          loadLocation:
            anyOf:
            - $ref: '#/components/schemas/addressLocation'
            - $ref: '#/components/schemas/unLocationLocation'
            - $ref: '#/components/schemas/facilityLocation'
      - type: object
        properties:
          loadLocation:
            description: |
              General purpose object to capture the `Load Location`. The location can be specified in **any** of the following ways: `UN Location Code`, `Facility` and/or an `Address`.
            example:
              locationName: Shanghai Shengdong International Container Terminal
              UNLocationCode: CNSGH
              facilityCode: SHENG
              facilityCodeListProvider: SMDG
      - type: object
        properties:
          dischargeLocation:
            anyOf:
            - $ref: '#/components/schemas/addressLocation'
            - $ref: '#/components/schemas/unLocationLocation'
            - $ref: '#/components/schemas/facilityLocation'
      - type: object
        properties:
          dischargeLocation:
            description: |
              General purpose object to capture the `Discharge Location`. The location can be specified in **any** of the following ways: `UN Location Code`, `Facility` and/or an `Address`.
            example:
              locationName: Transnet Port Terminals Cape Town
              UNLocationCode: ZACPT
              facilityCode: TNCT
              facilityCodeListProvider: SMDG
      - type: object
        properties:
          plannedDepartureDate:
            $ref: '#/components/schemas/plannedDepartureDate'
      - type: object
        properties:
          plannedArrivalDate:
            $ref: '#/components/schemas/plannedArrivalDate'
      - type: object
        properties:
          modeOfTransport:
            $ref: '#/components/schemas/modeOfTransport'
      - type: object
        properties:
          vesselName:
            $ref: '#/components/schemas/vesselName'
      - type: object
        properties:
          vesselIMONumber:
            $ref: '#/components/schemas/vesselIMONumber'
      - type: object
        properties:
          carrierImportVoyageNumber:
            $ref: '#/components/schemas/carrierImportVoyageNumber'
      - type: object
        properties:
          universalImportVoyageReference:
            $ref: '#/components/schemas/universalImportVoyageReference'
      - type: object
        properties:
          carrierExportVoyageNumber:
            $ref: '#/components/schemas/carrierExportVoyageNumber'
      - type: object
        properties:
          universalExportVoyageReference:
            $ref: '#/components/schemas/universalExportVoyageReference'
      - type: object
        properties:
          isUnderShippersResponsibility:
            $ref: '#/components/schemas/isUnderShippersResponsibility'
    transportPlanStage:
      type: string
      description: |
        Code qualifying a specific stage of transport e.g. pre-carriage, main carriage transport or on-carriage transport
        - PRC (Pre-Carriage)
        - MNC (Main Carriage Transport)
        - ONC (On-Carriage Transport)
      example: PRC
      enum:
      - PRC
      - MNC
      - ONC
    transportPlanStageSequenceNumber:
      type: integer
      description: |
        Sequence number of the transport plan stage
      format: int32
      example: 5
    addressLocation:
      required:
      - address
      type: object
      description: |
        An interface used to express a location using an `Address` object
      allOf:
      - type: object
        properties:
          locationName:
            $ref: '#/components/schemas/locationName'
      - type: object
        properties:
          address:
            description: Address related information
            allOf:
            - $ref: '#/components/schemas/address'
    locationName:
      maxLength: 100
      type: string
      description: The name of the location.
      example: Port of Amsterdam
    unLocationLocation:
      required:
      - UNLocationCode
      type: object
      description: |
        An interface used to express a location using a `Un Location Code`
      allOf:
      - type: object
        properties:
          locationName:
            $ref: '#/components/schemas/locationName'
      - type: object
        properties:
          UNLocationCode:
            $ref: '#/components/schemas/UNLocationCode'
    UNLocationCode:
      maxLength: 5
      type: string
      description: The UN Location code specifying where the place is located.
      example: FRPAR
    facilityLocation:
      required:
      - facilityCode
      - facilityCodeListProvider
      type: object
      description: |
        An interface used to express a location using a `Facility`. The facility can either be expressed using a `BIC` code or a `SMDG` code. The `facilityCode` does not contain the `UNLocationCode` - this should be provided in the `UnLocationCode` attribute.
      allOf:
      - type: object
        properties:
          locationName:
            $ref: '#/components/schemas/locationName'
      - type: object
        properties:
          UNLocationCode:
            allOf:
            - $ref: '#/components/schemas/UNLocationCode'
            - description: |
                The UN Location code specifying where the place is located. This field is conditionally mandatory depending on the value of the `facilityCodeListProvider` field.
      - type: object
        properties:
          facilityCode:
            $ref: '#/components/schemas/facilityCode'
      - type: object
        properties:
          facilityCodeListProvider:
            $ref: '#/components/schemas/facilityCodeListProvider'
    facilityCode:
      maxLength: 6
      type: string
      description: |
        The code used for identifying the specific facility. This code does <b>not</b> include the UN Location Code.
      nullable: false
      example: ADT
    facilityCodeListProvider:
      type: string
      description: |
        The provider used for identifying the facility Code. Some facility codes are only defined in combination with an `UN Location Code`
        - BIC (Requires a UN Location Code)
        - SMDG (Requires a UN Location Code)
      example: SMDG
      enum:
      - BIC
      - SMDG
    plannedDepartureDate:
      type: string
      description: |
        The planned date of departure.
      format: date
    plannedArrivalDate:
      type: string
      description: |
        The planned date of arrival.
      format: date
    modeOfTransport:
      type: string
      description: |
        The mode of transport as defined by DCSA.
      enum:
      - VESSEL
      - RAIL
      - TRUCK
      - BARGE
    vesselIMONumber:
      maxLength: 7
      type: string
      description: |
        The unique reference for a registered Vessel. The reference is the International Maritime Organisation (IMO) number, also sometimes known as the Lloyd&apos;s register code, which does not change during the lifetime of the vessel
      example: "9321483"
    carrierImportVoyageNumber:
      maxLength: 50
      type: string
      description: |
        The identifier of an import voyage. The vessel operator-specific identifier of the import Voyage.
      example: 2103N
    universalImportVoyageReference:
      pattern: \d{2}[0-9A-Z]{2}[NEWS]
      type: string
      description: |
        A global unique voyage reference for the import Voyage, as per DCSA standard, agreed by VSA partners for the voyage. The voyage reference must match the regular expression pattern: `\d{2}[0-9A-Z]{2}[NEWS]`
        - `2 digits` for the year
        - `2 alphanumeric characters` for the sequence number of the voyage
        - `1 character` for the direction/haul (`N`orth, `E`ast, `W`est or `S`outh).
      example: 2103N
    isUnderShippersResponsibility:
      type: boolean
      description: |
        Indicator whether mode of transportation for pre-carriage (e.g. truck, barge, rail) is under shipper's responsibility
      example: false
    shipmentLocations:
      type: object
      properties:
        shipmentLocations:
          type: array
          items:
            $ref: '#/components/schemas/shipmentLocation'
    shipmentLocation:
      required:
      - location
      - shipmentLocationTypeCode
      type: object
      description: |
        maps the relationship between Shipment and Location, e.g., the `Place of Receipt` and the `Place of Delivery` for a specific shipment. This is a reusable object between `Booking` and `Transport Document`
      allOf:
      - type: object
        properties:
          location:
            anyOf:
            - $ref: '#/components/schemas/addressLocation'
            - $ref: '#/components/schemas/unLocationLocation'
            - $ref: '#/components/schemas/facilityLocation'
      - type: object
        properties:
          location:
            description: |
              General purpose object to capture the location in the `ShipmentLocation`. The location can be specified in **any** of the following ways: `UN Location Code`, `Facility` and/or an `Address`.
            example:
              locationName: CMP Container Terminal Copenhagen
              UNLocationCode: DKCPH
              facilityCode: CMPDK
              facilityCodeListProvider: SMDG
      - type: object
        properties:
          displayedName:
            $ref: '#/components/schemas/displayedName'
      - type: object
        properties:
          shipmentLocationTypeCode:
            $ref: '#/components/schemas/shipmentLocationTypeCode'
      - type: object
        properties:
          eventDateTime:
            $ref: '#/components/schemas/eventLocationDateTime'
    displayedName:
      maxLength: 250
      type: string
      description: The address of the Party to be displayed on the transport document.
    shipmentLocationTypeCode:
      type: string
      description: |
        Links to the Location Type Code defined by DCSA.
        - PRE (Place of Receipt)
        - POL (Port of Loading)
        - POD (Port of Discharge)
        - PDE (Place of Delivery)
        - PCF (Pre-carriage From)
        - PSR (Pre-carriage under shipper’s responsibility)
        - OIR (Onward In-land Routing)
        - DRL (Depot release location)
        - ORI (Origin of goods)
        - IEL (Container intermediate export stop off location)
        - PTP (Prohibited transshipment port)
        - RTP (Requested transshipment port)
        - FCD (Full container drop-off location)
        - ECP (Empty container pick-up date and time)
      example: PRE
      enum:
      - PRE
      - POL
      - POD
      - PDE
      - PCF
      - PSR
      - OIR
      - DRL
      - ORI
      - IEL
      - PTP
      - RTP
      - FCD
      - ECP
    eventLocationDateTime:
      type: string
      description: |
        A date when the event is taking place at the location
      format: date-time
      example: 2021-11-03T10:23:00+01:00
    shippingInstructionResponse:
      type: object
      description: |
        The entire Shipping Instruction object with all nested objects including the confirmed booking(s).
      allOf:
      - $ref: '#/components/schemas/shippingInstructionRefStatus'
      - $ref: '#/components/schemas/shippingInstructionRequest'
    shippingInstructionRefStatus:
      required:
      - documentStatus
      - shippingInstructionCreatedDateTime
      - shippingInstructionReference
      - shippingInstructionUpdatedDateTime
      type: object
      description: |
        The `shippingInstructionReference` along with the `documentStatus`, created and updated timestamps is returned
      allOf:
      - type: object
        properties:
          shippingInstructionReference:
            $ref: '#/components/schemas/shippingInstructionReference'
      - type: object
        properties:
          documentStatus:
            $ref: '#/components/schemas/eblDocumentStatus'
      - type: object
        properties:
          shippingInstructionCreatedDateTime:
            $ref: '#/components/schemas/shippingInstructionCreatedDateTime'
      - type: object
        properties:
          shippingInstructionUpdatedDateTime:
            $ref: '#/components/schemas/shippingInstructionUpdatedDateTime'
    shippingInstructionReference:
      maxLength: 100
      type: string
      description: |
        The identifier for a shipping instruction provided by the carrier for system purposes.
      example: e0559d83-00e2-438e-afd9-fdd610c1a008
    eblDocumentStatus:
      type: string
      description: |
        The status of the Bill of Lading. Possible values are:
        - RECE (Received)
        - PENU (Pending Update)
        - DRFT (Draft)
        - PENA (Pending Approval)
        - APPR (Approved)
        - ISSU (Issued)
        - SURR (Surrendered)
        - VOID (Void)

        More details can be found on <a href="https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/shipmenteventtypecodes.csv">GitHub</a>. Be aware that the list linked to is the `ShipmentEventTypeCodes` which is equivalent to `documentStatus`, the list is a subset of the possible values.
      example: RECE
      enum:
      - RECE
      - PENU
      - DRFT
      - PENA
      - APPR
      - ISSU
      - SURR
      - VOID
    shippingInstructionCreatedDateTime:
      type: string
      description: |
        Date and time when the ShippingInstruction was created
      format: date-time
      example: 2019-11-12T07:41:00+08:30
    shippingInstructionUpdatedDateTime:
      type: string
      description: |
        Date and time when the ShippingInstruction was updated
      format: date-time
      example: 2019-11-12T07:41:00+08:30
    shippingInstructionRequest:
      type: object
      description: |
        The Shipping Instruction is an enrichment to the original booking shared by the shipper to the carrier. The shipping instruction includes volume or weight, cargo items, shipping dates, origin, destination, and other special instructions. The information given by the shipper through the shipping instruction is the information required to create a Transport Document.
      allOf:
      - $ref: '#/components/schemas/shippingInstructionShallow'
      - type: object
        properties:
          carrierBookingReference:
            allOf:
            - $ref: '#/components/schemas/carrierBookingReference'
            - description: |
                The associated booking number provided by the carrier. To be used if **all** `Consignment Items` belong to the same Booking.

                **Cannot** be used in combination with `Consignment Item` carrierBookingReference
      - $ref: '#/components/schemas/shippingInstructionDeep'
    shippingInstructionShallow:
      required:
      - isElectronic
      - isShippedOnBoardType
      - isToOrder
      type: object
      description: |
        The part of the ShippingInstruction that contains simple fields (no nested objects)
      allOf:
      - type: object
        properties:
          amendToTransportDocument:
            allOf:
            - $ref: '#/components/schemas/amendToTransportDocument'
      - type: object
        properties:
          transportDocumentTypeCode:
            $ref: '#/components/schemas/transportDocumentTypeCode'
      - type: object
        properties:
          isShippedOnBoardType:
            $ref: '#/components/schemas/isShippedOnBoardType'
      - type: object
        properties:
          numberOfCopies:
            $ref: '#/components/schemas/numberOfCopies'
      - type: object
        properties:
          numberOfOriginals:
            $ref: '#/components/schemas/requestedNumberOfOriginals'
      - type: object
        properties:
          isElectronic:
            $ref: '#/components/schemas/isElectronic'
      - type: object
        properties:
          isToOrder:
            $ref: '#/components/schemas/isToOrder'
      - type: object
        properties:
          areChargesDisplayedOnOriginals:
            $ref: '#/components/schemas/areChargesDisplayedOnOriginals'
      - type: object
        properties:
          areChargesDisplayedOnCopies:
            $ref: '#/components/schemas/areChargesDisplayedOnCopies'
      - type: object
        properties:
          displayedNameForPlaceOfReceipt:
            allOf:
            - $ref: '#/components/schemas/displayedName'
            - description: |
                The address of the Place of Receipt to be displayed on the transport document.
      - type: object
        properties:
          displayedNameForPortOfLoad:
            allOf:
            - $ref: '#/components/schemas/displayedName'
            - description: |
                The address of the Port of Load to be displayed on the transport document.
      - type: object
        properties:
          displayedNameForPortOfDischarge:
            allOf:
            - $ref: '#/components/schemas/displayedName'
            - description: |
                The address of the Port of Discharge to be displayed on the transport document.
      - type: object
        properties:
          displayedNameForPlaceOfDelivery:
            allOf:
            - $ref: '#/components/schemas/displayedName'
            - description: |
                The address of the Place of Delivery to be displayed on the transport document.
    amendToTransportDocument:
      maxLength: 20
      type: string
      description: |
        This field can be used to reference a Transport Document that is issued (documentStatus = `ISSU`) in order to amend changes.

        The field cannot be modified once set.
    transportDocumentTypeCode:
      type: string
      description: |
        Specifies the type of the transport document
        - BOL (Bill of Lading)
        - SWB (Sea Waybill)
      example: SWB
      enum:
      - BOL
      - SWB
    isShippedOnBoardType:
      type: boolean
      description: Specifies whether the Transport document is a received for shipment, or shipped on board.
      example: true
    numberOfCopies:
      type: integer
      description: The requested number of copies of the Transport document to be issued by the carrier. Only applicable for physical documents
      format: int32
      example: 2
    requestedNumberOfOriginals:
      type: integer
      description: |
        Number of original copies of the negotiable bill of lading that has been requested by the customer.
      format: int32
      example: 4
    isElectronic:
      type: boolean
      description: An indicator whether the transport document is electronically transferred.
      example: true
    isToOrder:
      type: boolean
      description: |
        Indicates whether the transport document is issued `to order` or not
      example: false
    areChargesDisplayedOnOriginals:
      type: boolean
      description: |
        An indicator of whether the charges are displayed on the original documents.
      example: true
    areChargesDisplayedOnCopies:
      type: boolean
      description: |
        An indicator of whether the charges are displayed on the copies of the documents.
      example: true
    carrierBookingReference:
      maxLength: 35
      type: string
      description: A set of unique characters provided by carrier to identify a booking.
      example: ABC709951
    shippingInstructionDeep:
      required:
      - consignmentItems
      - utilizedTransportEquipments
      type: object
      description: |
        The part of the ShippingInstruction that contains the nested objects.
      allOf:
      - type: object
        properties:
          placeOfIssue:
            anyOf:
            - $ref: '#/components/schemas/addressLocation'
            - $ref: '#/components/schemas/unLocationLocation'
      - type: object
        properties:
          placeOfIssue:
            description: |
              General purpose object to capture where the original Transport Document (`Bill of Lading`) will be issued. The location can be specified in **any** of the following ways: `UN Location Code` and/or an `Address`.
            example:
              locationName: DCSA Headquarters
              UNLocationCode: NLAMS
      - $ref: '#/components/schemas/consignmentItems'
      - $ref: '#/components/schemas/utilizedTransportEquipments'
      - $ref: '#/components/schemas/documentParties'
      - $ref: '#/components/schemas/references'
    consignmentItems:
      type: object
      properties:
        consignmentItems:
          minItems: 1
          type: array
          items:
            $ref: '#/components/schemas/consignmentItem'
    consignmentItem:
      required:
      - HSCode
      - cargoItems
      - descriptionOfGoods
      type: object
      description: |
        Defines a list of `CargoItems` belonging together and the associated `Booking`. A `ConsignmentItem` can be split across multiple containers (`UtilizedTransportEquipment`) by referencing multiple `CargoItems`
      allOf:
      - type: object
        properties:
          carrierBookingReference:
            allOf:
            - $ref: '#/components/schemas/carrierBookingReference'
            - description: |
                The associated booking number provided by the carrier for this `Consignment Item`.

                When multiple `carrierBookingReferences` are used then the bookings referred to must all contain the same:
                - transportPlan
                - shipmentLocations
                - receiptTypeAtOrigin
                - deliveryTypeAtDestination
                - cargoMovementTypeAtOrigin
                - cargoMovementTypeAtDestination
                - serviceContractReference
                - termsAndConditions

                **Cannot** be used in combination with Shipping Instruction header level carrierBookingReference
      - type: object
        properties:
          weight:
            allOf:
            - $ref: '#/components/schemas/weight'
            - description: |
                The total weight of all the `CargoItems` listed in the `ConsignmentItem`. Excludes the tare weight of the container(s).
      - type: object
        properties:
          volume:
            allOf:
            - $ref: '#/components/schemas/volume'
            - description: |
                The total volume of all the `CargoItems` listed in the `ConsignmentItem`.
      - type: object
        properties:
          weightUnit:
            $ref: '#/components/schemas/weightUnit'
      - type: object
        properties:
          volumeUnit:
            $ref: '#/components/schemas/volumeUnit'
      - type: object
        properties:
          descriptionOfGoods:
            $ref: '#/components/schemas/descriptionOfGoods'
      - type: object
        properties:
          HSCode:
            $ref: '#/components/schemas/HSCode'
      - $ref: '#/components/schemas/cargoItems'
      - $ref: '#/components/schemas/references'
    weight:
      type: number
      description: The total weight of the cargo including packaging items being carried in the container(s). Excludes the tare weight of the container(s).
      format: float
      example: 13000.3
    volume:
      type: number
      description: Calculated by multiplying the width, height, and length of the packed cargo.
      format: float
      example: 12
    weightUnit:
      type: string
      description: The unit of measure which can be expressed in imperial or metric terms
      example: KGM
      enum:
      - KGM
      - LBR
    volumeUnit:
      type: string
      description: |
        The unit of measure which can be expressed in either imperial or metric terms
        - FTQ (Cubic meter)
        - MTQ (Cubic foot)
      example: MTQ
      enum:
      - MTQ
      - FTQ
    descriptionOfGoods:
      type: string
      description: The cargo description are details which accurately and properly describe the cargo being shipped in the container(s) as provided by the shipper.
    HSCode:
      maxLength: 10
      type: string
      description: Used by customs to classify the product being shipped.
    cargoItems:
      type: object
      properties:
        cargoItems:
          minItems: 1
          type: array
          items:
            $ref: '#/components/schemas/cargoItem'
    cargoItem:
      required:
      - equipmentReference
      - numberOfPackages
      - packageCode
      - weight
      - weightUnit
      type: object
      description: A `cargoItem` is the smallest unit used by stuffing. A `cargoItem` cannot be split across containers.
      allOf:
      - $ref: '#/components/schemas/cargoLineItems'
      - type: object
        properties:
          equipmentReference:
            $ref: '#/components/schemas/equipmentReference'
      - type: object
        properties:
          weight:
            $ref: '#/components/schemas/weight'
      - type: object
        properties:
          volume:
            $ref: '#/components/schemas/volume'
      - type: object
        properties:
          weightUnit:
            $ref: '#/components/schemas/weightUnit'
      - type: object
        properties:
          volumeUnit:
            $ref: '#/components/schemas/volumeUnit'
      - type: object
        properties:
          numberOfPackages:
            $ref: '#/components/schemas/numberOfPackages'
      - type: object
        properties:
          packageCode:
            $ref: '#/components/schemas/packageCode'
      - type: object
        properties:
          packageNameOnBL:
            $ref: '#/components/schemas/packageNameOnBL'
    cargoLineItems:
      type: object
      properties:
        cargoLineItems:
          type: array
          items:
            $ref: '#/components/schemas/cargoLineItem'
    cargoLineItem:
      required:
      - cargoLineItemID
      - shippingMarks
      type: object
      description: |
        identifies the specific details of packages within a cargo item.
      allOf:
      - type: object
        properties:
          cargoLineItemID:
            $ref: '#/components/schemas/cargoLineItemID'
      - type: object
        properties:
          shippingMarks:
            $ref: '#/components/schemas/shippingMarks'
    cargoLineItemID:
      type: string
      description: Identifies the cargo line item (package) within the cargo. The cargo line item ID is provided by the shipper and is used to define the stuffing. Cargo line items belonging to the same cargo items are stuffed in the same container.
    shippingMarks:
      type: string
      description: The identifying details of a package or the actual markings that appear on the package(s). This information is provided by the shipper.
    equipmentReference:
      maxLength: 15
      type: string
      description: |
        The unique identifier for the equipment, which should follow the BIC ISO Container Identification Number where possible.
        According to ISO 6346, a container identification code consists of a 4-letter prefix and a 7-digit number (composed of a 3-letter owner code, a category identifier, a serial number, and a check-digit). If a container does not comply with ISO 6346, it is suggested to follow Recommendation #2 “Container with non-ISO identification” from SMDG.
      example: APZU4812090
    numberOfPackages:
      type: integer
      description: Specifies the number of packages associated with this cargo item
      format: int32
      example: 18
    packageCode:
      maxLength: 3
      type: string
      description: The unique identifier for the package type
      example: 5H4
    packageNameOnBL:
      maxLength: 50
      type: string
      description: |
        To provide package description displayed on the BL
      example: Bags
    references:
      type: object
      properties:
        references:
          type: array
          items:
            $ref: '#/components/schemas/reference'
    reference:
      required:
      - referenceType
      - referenceValue
      type: object
      description: |
        references provided by the shipper or freight forwarder at the time of booking or at the time of providing shipping instruction. Carriers share it back when providing track and trace event updates, some are also printed on the B/L. Customers can use these references to track shipments in their internal systems.
      allOf:
      - type: object
        properties:
          referenceType:
            $ref: '#/components/schemas/referenceType'
      - type: object
        properties:
          referenceValue:
            $ref: '#/components/schemas/referenceValue'
    referenceType:
      type: string
      description: |
        The reference type codes defined by DCSA.
        - FF (Freight Forwarder’s Reference)
        - SI (Shipper’s Reference)
        - PO (Purchase Order Reference)
        - CR (Customer’s Reference)
        - AAO (Consignee’s Reference)
        - ECR (Empty container release reference)
        - CSI (Customer shipment ID)
        - BPR (Booking party reference number)
        - BID (Booking Request ID)
        - RUC (Registro Único del Contribuyente)
        - DUE (Declaração Única de Exportação)
        - CER (Canadian Export Reporting System)
        - AES (Automated Export System)

        More details can be found on <a href="https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/referencetypes.csv">GitHub</a>. Be aware that the list is a subset of the possible values.
      example: FF
      enum:
      - FF
      - SI
      - PO
      - CR
      - AAO
      - ECR
      - CSI
      - BPR
      - BID
      - RUC
      - DUE
      - CER
      - AES
    referenceValue:
      maxLength: 100
      type: string
      description: The actual value of the reference.
    utilizedTransportEquipments:
      type: object
      properties:
        utilizedTransportEquipments:
          minItems: 1
          type: array
          items:
            $ref: '#/components/schemas/utilizedTransportEquipment'
    utilizedTransportEquipment:
      required:
      - cargoGrossWeight
      - cargoGrossWeightUnit
      - equipment
      - isShipperOwned
      type: object
      description: |
        Specifies the container (`equipment`), the total weight, the `seals` used and possible `reefer` settings
      allOf:
      - type: object
        properties:
          equipment:
            $ref: '#/components/schemas/equipment'
      - type: object
        properties:
          cargoGrossWeight:
            $ref: '#/components/schemas/cargoGrossWeight'
      - type: object
        properties:
          cargoGrossWeightUnit:
            $ref: '#/components/schemas/weightUnit'
      - type: object
        properties:
          cargoGrossVolume:
            $ref: '#/components/schemas/cargoGrossVolume'
      - type: object
        properties:
          cargoGrossVolume:
            description: |
              The grand total volume of the cargo per container, which can be expressed in imperial or metric terms, as provided by the carrier.
      - type: object
        properties:
          cargoGrossVolumeUnit:
            $ref: '#/components/schemas/volumeUnit'
      - type: object
        properties:
          numberOfPackages:
            $ref: '#/components/schemas/numberOfPackages'
      - type: object
        properties:
          numberOfPackages:
            description: |
              Specifies the number of packages associated with an equipment (container)
      - type: object
        properties:
          isShipperOwned:
            $ref: '#/components/schemas/isShipperOwned'
      - type: object
        properties:
          activeReeferSettings:
            type: object
            description: specifies the settings for an active reefer container used to a shipment.
            allOf:
            - type: object
              properties:
                temperatureMin:
                  $ref: '#/components/schemas/temperatureMin'
            - type: object
              properties:
                temperatureMax:
                  $ref: '#/components/schemas/temperatureMax'
            - type: object
              properties:
                temperatureUnit:
                  $ref: '#/components/schemas/temperatureUnit'
            - type: object
              properties:
                humidityMin:
                  $ref: '#/components/schemas/humidityMin'
            - type: object
              properties:
                humidityMax:
                  $ref: '#/components/schemas/humidityMax'
            - type: object
              properties:
                ventilationMin:
                  $ref: '#/components/schemas/ventilationMin'
            - type: object
              properties:
                ventilationMax:
                  $ref: '#/components/schemas/ventilationMax'
      - $ref: '#/components/schemas/seals'
    equipment:
      required:
      - equipmentReference
      type: object
      description: |
        used for storing cargo in/on during transport. The equipment size/type is defined by the ISO 6346 code. The most common equipment size/type is 20'/40'/45' Dry Freight Container, but several different versions exist.
      allOf:
      - type: object
        properties:
          equipmentReference:
            $ref: '#/components/schemas/equipmentReference'
      - type: object
        properties:
          ISOEquipmentCode:
            $ref: '#/components/schemas/ISOEquipmentCode'
      - type: object
        properties:
          tareWeight:
            $ref: '#/components/schemas/tareWeight'
      - type: object
        properties:
          weightUnit:
            $ref: '#/components/schemas/weightUnit'
    ISOEquipmentCode:
      maxLength: 4
      type: string
      description: Unique code for the different equipment size/type used for transporting commodities. The code is a concatenation of ISO Equipment Size Code and ISO Equipment Type Code A and follows the ISO 6346 standard.
      example: 22GP
    tareWeight:
      type: number
      description: The weight of an empty container (gross container weight).
      format: float
      example: 12000
    cargoGrossWeight:
      type: number
      description: |
        The grand total weight of the cargo and weight per container(s) including packaging items being carried, which can be expressed in imperial or metric terms, as provided by the shipper. Excludes the tare weight of the container(s).'
      format: float
      example: 12000
    cargoGrossVolume:
      type: number
      description: |
        The grand total volume of the commodity
      format: float
      example: 120
    isShipperOwned:
      type: boolean
      description: Indicates whether the container is shipper owned (SOC).
      example: true
    temperatureMin:
      type: number
      description: Indicates the minimum temperature setting on the container.
      format: float
      example: -18.1
    temperatureMax:
      type: number
      description: Indicates the maximum temperature setting on the container.
      format: float
      example: 64.3
    temperatureUnit:
      type: string
      description: Celsius (CEL) or Fahrenheit (FAH).
      example: CEL
      enum:
      - CEL
      - FAH
    humidityMin:
      type: number
      description: Indicates the minimum humidity setting on the container in percent.
      format: float
      example: 80
    humidityMax:
      type: number
      description: Indicates the maximum humidity setting on the container in percent.
      format: float
      example: 100
    ventilationMin:
      type: number
      description: Indicates the minimum ventilation setting on the container in MTQ/Hr.
      format: float
      example: 266
    ventilationMax:
      type: number
      description: Indicates the maximum ventilation setting on the container in MTQ/Hr.
      format: float
      example: 296
    seals:
      type: object
      properties:
        seals:
          type: array
          items:
            $ref: '#/components/schemas/seal'
    seal:
      required:
      - sealNumber
      - sealType
      type: object
      description: addresses the seal-related information associated with the shipment equipment. A seal is put on a shipment equipment once it is loaded. This seal is meant to stay on until the shipment equipment reaches its final destination.
      allOf:
      - type: object
        properties:
          sealNumber:
            $ref: '#/components/schemas/sealNumber'
      - type: object
        properties:
          sealSource:
            $ref: '#/components/schemas/sealSource'
      - type: object
        properties:
          sealType:
            $ref: '#/components/schemas/sealType'
    sealNumber:
      maxLength: 15
      type: string
      description: Identifies a seal affixed to the container.
    sealSource:
      type: string
      description: |
        The source of the seal, namely who has affixed the seal. This attribute links to the Seal Source ID defined in the Seal Source reference data entity.
        - CAR (Carrier)
        - SHI (Shipper)
        - PHY (Phytosanitary)
        - VET (Veterinary)
        - CUS (Customs)
      example: CUS
      enum:
      - CAR
      - SHI
      - PHY
      - VET
      - CUS
    sealType:
      type: string
      description: |
        The type of seal. This attribute links to the Seal Type ID defined in the Seal Type reference data entity.
        - KLP (Keyless padlock)
        - BLT (Bolt)
        - WIR (Wire)
      example: WIR
      enum:
      - KLP
      - BLT
      - WIR
    documentParties:
      type: object
      properties:
        documentParties:
          type: array
          items:
            $ref: '#/components/schemas/documentParty'
    documentParty:
      required:
      - isToBeNotified
      - party
      - partyFunction
      type: object
      description: stores the parties involved in the transport document.
      allOf:
      - type: object
        properties:
          party:
            allOf:
            - $ref: '#/components/schemas/party_1'
      - type: object
        properties:
          partyFunction:
            $ref: '#/components/schemas/partyFunction'
      - type: object
        properties:
          displayedAddress:
            type: array
            items:
              $ref: '#/components/schemas/addressLine'
      - type: object
        properties:
          isToBeNotified:
            $ref: '#/components/schemas/isToBeNotified'
    partyFunction:
      type: string
      description: |
        Specifies the role of the party in the context of the given Shipping Instruction.
        - OS (Original shipper)
        - CN (Consignee)
        - COW (Invoice payer on behalf of the consignor (shipper))
        - COX (Invoice payer on behalf of the consignee)
        - MS (Document/message issuer/sender)
        - N1 (First Notify Party)
        - N2 (Second Notify Party)
        - NI (Other Notify Party)
        - DDR (Consignor's freight forwarder)
        - DDS (Consignee's freight forwarder)
        - HE (Carrier booking office (transportation office))
        - SCO (Service contract owner - Defined by DCSA)
        - BA (Booking Agency)
        - EBL (EBL Solution Provider)
      example: DDS
      enum:
      - OS
      - CN
      - COW
      - COX
      - MS
      - N1
      - N2
      - NI
      - DDR
      - DDS
      - HE
      - SCO
      - BA
      - EBL
    addressLine:
      maxLength: 250
      type: string
      description: A single address line.
      example: Kronprincessegade 54
    isToBeNotified:
      type: boolean
      description: Used to decide whether the party will be notified of the arrival of the cargo.
      example: true
    charges:
      type: object
      properties:
        charges:
          type: array
          items:
            $ref: '#/components/schemas/charge'
    charge:
      required:
      - calculationBasis
      - chargeType
      - currencyAmount
      - currencyCode
      - paymentTermCode
      - quantity
      - unitPrice
      type: object
      description: |
        addresses the monetary value of freight and other service charges for a transport document.
      allOf:
      - type: object
        properties:
          chargeType:
            $ref: '#/components/schemas/chargeType'
      - type: object
        properties:
          currencyAmount:
            $ref: '#/components/schemas/currencyAmount'
      - type: object
        properties:
          currencyCode:
            $ref: '#/components/schemas/currencyCode'
      - type: object
        properties:
          paymentTermCode:
            $ref: '#/components/schemas/paymentTermCode'
      - type: object
        properties:
          calculationBasis:
            $ref: '#/components/schemas/calculationBasis'
      - type: object
        properties:
          unitPrice:
            $ref: '#/components/schemas/unitPrice'
      - type: object
        properties:
          quantity:
            $ref: '#/components/schemas/quantity'
    chargeType:
      maxLength: 20
      type: string
      description: |
        Free text field describing the charge type to apply
    currencyAmount:
      type: number
      description: The monetary value of all freight and other service charges for a transport document, with a maximum of 2-digit decimals.
      format: float
      example: 1012.12
    currencyCode:
      maxLength: 3
      type: string
      description: The currency for the charge, using a 3-character code (ISO 4217).
      example: DKK
    paymentTermCode:
      type: string
      description: |
        Indicates whether freight & charges are due for payment before the shipment is effected, practically before the transport document is released to shipper (Prepaid) or before the shipment is finalized meaning cargo released to consignee (Collect)
        - PRE (Prepaid)
        - COL (Collect)
      example: PRE
      enum:
      - PRE
      - COL
    calculationBasis:
      maxLength: 50
      type: string
      description: The code specifying the measure unit used for the corresponding unit price for this cost, such as per day, per ton, per square metre.
      example: Per day
    unitPrice:
      type: number
      description: The unit price of this charge item in the currency of the charge.
      format: float
      example: 3456.6
    quantity:
      type: number
      description: The amount of unit for this charge item.
      format: float
      example: 34.4
    carrierClauses:
      type: object
      properties:
        carrierClauses:
          type: array
          items:
            $ref: '#/components/schemas/carrierClause'
    carrierClause:
      type: object
      description: |
        comprises clauses, added by the carrier to the Transport Document, which are subject to local rules/guidelines or certain mandatory information required to be shared with the customer. Usually printed below the cargo description.
      allOf:
      - type: object
        properties:
          clauseContent:
            $ref: '#/components/schemas/clauseContent'
    clauseContent:
      type: string
      description: The content of the clause.
    name:
      maxLength: 100
      type: string
      description: Name of the contact
      example: Henrik
    phone:
      maxLength: 30
      type: string
      description: Phone number for the contact
      example: +45 33364660
    email:
      maxLength: 100
      type: string
      description: E-mail address for the contact
      example: info@dcsa.org
    url:
      maxLength: 100
      type: string
      description: URL for the contact
      example: https://www.dcsa.org
    transferblock_supportingDocuments:
      type: object
      properties:
        documentType:
          type: string
          description: The type of supporting document. TODO explore if this could be enum
          example: customs-declaration
        content:
          type: string
          example: Zm9vYmFyYmF6
    transaction_supportingDocuments:
      required:
      - documentHash
      - documentType
      type: object
      properties:
        documentHash:
          type: string
          example: 97df3588b5a3f24babc3851b372f0ba71a9dcdded43b14b9d06961bfc1707d9d
        documentType:
          type: string
          description: The type of supporting document. TODO explore if this could be enum
          example: customs-declaration
    jwks_keys:
      required:
      - kty
      type: object
      properties:
        kty:
          type: string
          description: The "kty" (key type) parameter identifies the cryptographic algorithm family used with the key, such as "RSA" or "EC".  "kty" values should either be registered in the IANA "JSON Web Key Types" registry established by [JWA] or be a value that contains a Collision- Resistant Name.  The "kty" value is a case-sensitive string.  This member MUST be present in a JWK.
        use:
          type: string
          description: |
            The "use" (public key use) parameter identifies the intended use of
            the public key.  The "use" parameter is employed to indicate whether
            a public key is used for encrypting data or verifying the signature
            on data.
            values defined are:
             * sig (signature)
             * enc (encryption)
          enum:
          - sig
          - enc
        key_ops:
          type: string
          description: |
            The "key_ops" (key operations) parameter identifies the operation(s)
            for which the key is intended to be used.  The "key_ops" parameter is
            intended for use cases in which public, private, or symmetric keys
            may be present.

            Its value is an array of key operation values.  Values defined by
            this specification are:

            *  sign (compute digital signature or MAC)
            *  verify (verify digital signature or MAC)
            *  encrypt (encrypt content)
            *  decrypt (decrypt content and validate decryption, if applicable)
            *  wrapKey (encrypt key)
            *  unwrapKey (decrypt key and validate decryption, if applicable)
            *  deriveKey (derive key)
            *  deriveBits (derive bits not to be used as a key)
          enum:
          - sign
          - verify
          - encrypt
          - decrypt
          - wrapKey
          - unwrapKey
          - deriveKey
          - deriveBits
        alg:
          type: string
          description: The "alg" (algorithm) parameter identifies the algorithm intended for use with the key.  The values used should either be registered in the IANA "JSON Web Signature and Encryption Algorithms" registry established by [JWA] or be a value that contains a Collision- Resistant Name.  The "alg" value is a case-sensitive ASCII string. Use of this member is OPTIONAL.
        kid:
          type: string
          description: The "kid" (key ID) parameter is used to match a specific key.  This is used, for instance, to choose among a set of keys within a JWK Set during key rollover.  The structure of the "kid" value is unspecified.  When "kid" values are used within a JWK Set, different keys within the JWK Set SHOULD use distinct "kid" values.  (One example in which different keys might use the same "kid" value is if they have different "kty" (key type) values but are considered to be equivalent alternatives by the application using them.)  The "kid" value is a case-sensitive string.  Use of this member is OPTIONAL. When used with JWS or JWE, the "kid" value is used to match a JWS or JWE "kid" Header Parameter value.
        x5u:
          type: string
          description: The "x5u" (X.509 URL) parameter is a URI [RFC3986] that refers to a resource for an X.509 public key certificate or certificate chain [RFC5280].  The identified resource MUST provide a representation of the certificate or certificate chain that conforms to RFC 5280 [RFC5280] in PEM-encoded form, with each certificate delimited as specified in Section 6.1 of RFC 4945 [RFC4945].  The key in the first certificate MUST match the public key represented by other members of the JWK.  The protocol used to acquire the resource MUST provide integrity protection; an HTTP GET request to retrieve the certificate MUST use TLS [RFC2818] [RFC5246]; the identity of the server MUST be validated, as per Section 6 of RFC 6125 [RFC6125].  Use of this member is OPTIONAL.
          format: url
        x5c:
          type: array
          description: |
            The "x5c" (X.509 certificate chain) parameter contains a chain of one
            or more PKIX certificates [RFC5280].  The certificate chain is
            represented as a JSON array of certificate value strings.  Each
            string in the array is a base64-encoded (Section 4 of [RFC4648] --
            not base64url-encoded) DER [ITU.X690.1994] PKIX certificate value.
            The PKIX certificate containing the key value MUST be the first
            certificate.  This MAY be followed by additional certificates, with
            each subsequent certificate being the one used to certify the
            previous one.  The key in the first certificate MUST match the public
            key represented by other members of the JWK.  Use of this member is
            OPTIONAL.
          items:
            type: string
        x5t:
          type: string
          description: |
            The "x5t" (X.509 certificate SHA-1 thumbprint) parameter is a
            base64url-encoded SHA-1 thumbprint (a.k.a. digest) of the DER
            encoding of an X.509 certificate [RFC5280].  Note that certificate
            thumbprints are also sometimes known as certificate fingerprints.
            The key in the certificate MUST match the public key represented by
            other members of the JWK.  Use of this member is OPTIONAL.
      description: The value of the "keys" parameter is an array of JWK values. By default, the order of the JWK values within the array does not imply an order of preference among them, although applications of JWK Sets can choose to assign a meaning to the order for their purposes, if desired.
    rsaPrivateKey_oth:
      type: object
      properties:
        r:
          type: string
          description: |
            The "r" (prime factor) parameter within an "oth" array member
            represents the value of a subsequent prime factor.  It is represented
            as a Base64urlUInt-encoded value.
          format: byte
        d:
          type: string
          description: |
            The "d" (factor CRT exponent) parameter within an "oth" array member
            represents the CRT exponent of the corresponding prime factor.  It is
            represented as a Base64urlUInt-encoded value.
          format: byte
        t:
          type: string
          description: |
            The "t" (factor CRT coefficient) parameter within an "oth" array
            member represents the CRT coefficient of the corresponding prime
            factor.  It is represented as a Base64urlUInt-encoded value.
          format: byte
  parameters:
    Api-Version-Major:
      name: API-Version
      in: header
      description: |
        An API-Version header MAY be added to the request (optional); if added it MUST only contain MAJOR version. API-Version header MUST be aligned with the URI version.
      required: false
      schema:
        type: string
        example: "1"
  headers:
    API-Version:
      description: SemVer used to indicate the version of the contract (API version) returned.
      schema:
        type: string
        example: 1.0.0
